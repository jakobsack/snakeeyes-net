<?xml version="1.0"?>
<configuration>
  <configSections>
		<section name="TriggerEveryHour.Filter" type="System.Configuration.NameValueSectionHandler"/>
		<section name="DiskFreeSpacePct_C.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="DiskFreeSpacePct_D.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="DiskFreeSpacePct_E.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="RAM_Spooler.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="EventLog.EventLogProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="MSMQ_TotalBytes.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
		<section name="MSMQ_CustomQueue.PerfMonProbe" type="System.Configuration.NameValueSectionHandler"/>
	</configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>
  <runtime>
    <gcServer enabled="true"/>
  </runtime>
	<appSettings>
		<add key="ServiceDependencies" value="MSMQ"/>
	</appSettings>
	<TriggerEveryHour.Filter>
		<add key="NextTriggerTime" value="3600"/>
		<add key="DelayTriggerTime" value="0"/>
	</TriggerEveryHour.Filter>
	<DiskFreeSpacePct_C.PerfMonProbe>
		<add key="CategoryName" value="LogicalDisk"/>
		<add key="CounterName" value="% Free Space"/>
		<add key="InstanceName" value="C:"/>
		<add key="MinValue" value="50"/>
		<add key="EventId" value="2"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="900"/>
	</DiskFreeSpacePct_C.PerfMonProbe>
	<DiskFreeSpacePct_D.PerfMonProbe>
		<add key="CategoryName" value="LogicalDisk"/>
		<add key="CounterName" value="% Free Space"/>
		<add key="InstanceName" value="D:"/>
		<add key="MinValue" value="10"/>
		<add key="DefaultValue" value="100"/>
		<add key="EventId" value="2"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="900"/>
	</DiskFreeSpacePct_D.PerfMonProbe>
	<DiskFreeSpacePct_E.PerfMonProbe>
		<add key="CategoryName" value="LogicalDisk"/>
		<add key="CounterName" value="% Free Space"/>
		<add key="InstanceName" value="E:"/>
		<add key="MinValue" value="10"/>
		<add key="DefaultValue" value="100"/>
		<add key="EventId" value="2"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="900"/>
	</DiskFreeSpacePct_E.PerfMonProbe>
	<RAM_Spooler.PerfMonProbe>
		<add key="CategoryName" value="Process"/>
		<add key="CounterName" value="Private Bytes"/>
		<add key="InstanceName" value=""/>
		<add key="ServiceName" value="spooler"/>
		<add key="DefaultValue" value="0"/>
		<add key="MaxValue" value="500000000"/>
		<add key="EventId" value="3"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="10"/>
	</RAM_Spooler.PerfMonProbe>
	<!--
  <EventLog.EventLogProbe>
    <add key="EventLogName" value="Application"/>
    <add key="ProbeFrequency" value="30"/>
    <add key="SnakeEyes,1" value="Error"/>
    <add key="SnakeEyes,Error" value=""/>
    <add key="SnakeEyes,2" value="Error"/>
    <add key="Perflib" value="Error"/>
  </EventLog.EventLogProbe>
-->
	<MSMQ_TotalBytes.PerfMonProbe>
		<add key="CategoryName" value="MSMQ Service"/>
		<add key="CounterName" value="Total bytes in all queues"/>
		<add key="MaxValue" value="858993459"/>
		<add key="EventId" value="1"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="10"/>
	</MSMQ_TotalBytes.PerfMonProbe>
	<MSMQ_CustomQueue.PerfMonProbe>
		<add key="CategoryName" value="MSMQ Queue"/>
		<add key="CounterName" value="Messages in Queue"/>
		<add key="InstanceName" value="private$\Hello"/>
		<add key="MaxValue" value="10"/>
		<add key="DefaultValue" value="0"/>
		<add key="EventId" value="1"/>
		<add key="EventType" value="Warning"/>
		<add key="ProbeFrequency" value="10"/>
	</MSMQ_CustomQueue.PerfMonProbe>
	<system.diagnostics>
		<sources>
			<source name="DiskFreeSpacePct_C.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
			<source name="DiskFreeSpacePct_D.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
			<source name="DiskFreeSpacePct_E.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
			<source name="RAM_Spooler.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
			<!--
      <source name="EventLog.EventLogProbe" switchValue="Information">
        <listeners>
          <clear/>
          <add name="EventLogEveryHour"/>
        </listeners>
      </source>
      -->
      <!--
			<source name="MSMQ_TotalBytes.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
      -->
      <!--
			<source name="MSMQ_CustomQueue.PerfMonProbe" switchValue="Information">
				<listeners>
					<clear/>
					<add name="EventLogEveryHour"/>
				</listeners>
			</source>
      -->
		</sources>
		<sharedListeners>
			<add type="System.Diagnostics.EventLogTraceListener" name="EventLogEveryHour" initializeData="SnakeEyes">
				<filter type="SnakeEyes.DelayStateFilter, DelayStateFilter" initializeData="TriggerEveryHour.Filter"/>
			</add>
		</sharedListeners>
    <!--
		<trace>
			<listeners>
				<add name="WCFService" type="SnakeEyes.WCFService, WCFService"/>
			</listeners>
		</trace>
    -->
	</system.diagnostics>
	<startup>
	</startup>
  <!--
	<system.serviceModel>
		<services>
			<service name="SnakeEyes.WCFService" behaviorConfiguration="SnakeEyes.WCFServiceBehavior">
				<endpoint address="" binding="basicHttpBinding" contract="SnakeEyes.IProbeMonitorService"/>
				<endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
				<endpoint address="status" binding="webHttpBinding" contract="SnakeEyes.IProbeStatusService" behaviorConfiguration="SnakeEyes.ProbeStatusServiceBehavior"/>
				<endpoint address="files" binding="webHttpBinding" contract="SnakeEyes.IFileHostService" behaviorConfiguration="SnakeEyes.FileHostServiceBehavior"/>
				<host>
					<baseAddresses>
						<add baseAddress="http://localhost:8731/SnakeEyes/ProbeMonitorService"/>
					</baseAddresses>
				</host>
			</service>
			<service name="SnakeEyes.CrossDomainService">
				<host>
					<baseAddresses>
						<add baseAddress="http://localhost:8731/"/>
					</baseAddresses>
				</host>
				<endpoint address="" binding="webHttpBinding" contract="SnakeEyes.ICrossDomainService" behaviorConfiguration="SnakeEyes.CrossDomainServiceBehavior"/>
			</service>
		</services>
		<behaviors>
			<serviceBehaviors>
				<behavior name="SnakeEyes.WCFServiceBehavior">
					<serviceMetadata httpGetEnabled="true"/>
					<serviceDebug includeExceptionDetailInFaults="false"/>
				</behavior>
			</serviceBehaviors>
			<endpointBehaviors>
				<behavior name="SnakeEyes.CrossDomainServiceBehavior">
					<webHttp/>
				</behavior>
				<behavior name="SnakeEyes.ProbeStatusServiceBehavior">
					<webHttp/>
				</behavior>
				<behavior name="SnakeEyes.FileHostServiceBehavior">
					<webHttp/>
				</behavior>
			</endpointBehaviors>
		</behaviors>
	</system.serviceModel>
  -->
</configuration>
